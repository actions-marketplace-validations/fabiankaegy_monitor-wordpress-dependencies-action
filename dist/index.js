!function(){"use strict";var e={n:function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,{a:n}),n},d:function(t,n){for(var o in n)e.o(n,o)&&!e.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:n[o]})},o:function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r:function(e){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t);var n=require("path"),o=e.n(n),r=require("@actions/core"),s=require("@actions/github"),a=require("@actions/exec"),i=require("fs"),c=e.n(i),l=(require("pretty-bytes"),require("php-array-parser")),u=e.n(l);async function p(e){try{return await c().promises.access(e,c().constants.F_OK),!0}catch(e){}return!1}function d(e){if(0==e.length)return"";for(;e.every((e=>!e[e.length-1]));)for(const t of e)t.pop();const[t]=e;let n=t.length;if(3===n&&e.every((e=>"0 B"===e[2]))){n-=1;for(const t of e)t.pop()}return 0===n?"":[["Filename","Dependencies","Change",""].slice(0,n),[":---",":---:",":---:",":---:"].slice(0,n),...e].map((e=>`| ${e.join(" | ")} |`)).join("\n")}function g(e){return/^(1|true|yes)$/.test(e)}async function m(e){const t=await async function(e){return(await c().promises.readFile(e)).toString()}(e),n=await async function(e){const t=e.match(/array\(.+?(?=\;)/gm);if(!t)throw new Error("Could not find asset file array");return t[0]}(t);return u().parse(n)}function f(e,t,n){return n.indexOf(e)===t}var h=require("util.promisify"),y=e.n(h),w=require("glob"),b=e.n(w),k=require("minimatch"),v=e.n(k);require("fs-extra");const $=y()(b());class _{constructor(e){const t=e||{};t.pattern=t.pattern||"**/*.asset.php",t.filename=t.filename||"size-plugin.json",t.writeFile=!1!==t.writeFile,t.filepath=o().join(process.cwd(),t.filename),t.mode=t.mode||"production",this.options=t}filterFiles(e){const t=v().filter(this.options.pattern),n=this.options.exclude?v().filter(this.options.exclude):()=>!1;return e.filter((e=>t(e)&&!n(e)))}async readFromDisk(e){const t=await $(this.options.pattern,{cwd:e,ignore:this.options.exclude}),n=await Promise.all(this.filterFiles(t).map((t=>async function(e){const{dependencies:t}=await m(e);return t}(o().join(e,t)).catch((()=>null)))));return r=n,t.reduce(((e,t,n)=>(e[t]=r[n],e)),{});var r}async getDiff(e,t){const n=[...Object.keys(e),...Object.keys(t)].filter(f),o=[];for(const r of n){const n=t[r]||0,s=e[r]||0,a=n.filter((e=>!s.includes(e)));o.push({filename:r,dependency:n.join(", "),difference:a.join(", ")})}return o}}async function x(e,t,n){const{owner:s,repo:i,number:c}=t.issue;try{(0,r.debug)("pr"+JSON.stringify(t.payload,null,2))}catch(e){}let l,u;if("push"==t.eventName)l=t.payload.before,u=t.payload.ref,console.log(`Pushed new commit on top of ${u} (${l})`);else{if("pull_request"!=t.eventName&&"pull_request_target"!=t.eventName)throw new Error(`Unsupported eventName in github.context: ${t.eventName}. Only "pull_request", "pull_request_target", and "push" triggered workflows are currently supported.`);{const e=t.payload.pull_request;l=e.base.sha,u=e.base.ref,console.log(`PR #${c} is targeted at ${u} (${u})`)}}(0,r.getInput)("cwd")&&process.chdir((0,r.getInput)("cwd"));const m=new _({pattern:(0,r.getInput)("pattern")||"**/dist/**/*.asset.php",exclude:(0,r.getInput)("exclude")||"{**/*.map,**/node_modules/**}"}),f=(0,r.getInput)("build-script")||"build",h=process.cwd();let y=await p(o().resolve(h,"yarn.lock")),w=await p(o().resolve(h,"pnpm-lock.yaml")),b=await p(o().resolve(h,"package-lock.json")),k="npm",v="npm install";y?(v="yarn --frozen-lockfile",k="yarn"):w?(v="pnpm install --frozen-lockfile",k="pnpm"):b&&(v="npm ci"),(0,r.startGroup)("[current] Install Dependencies"),console.log(`Installing using ${v}`),await(0,a.exec)(v),(0,r.endGroup)(),(0,r.startGroup)(`[current] Build using ${k}`),console.log(`Building using ${k} run ${f}`),await(0,a.exec)(`${k} run ${f}`),(0,r.endGroup)(),await(0,a.exec)("git reset --hard");const $=await m.readFromDisk(h);(0,r.startGroup)("[base] Checkout target branch");try{if(!u)throw Error("missing context.payload.pull_request.base.ref");await(0,a.exec)(`git fetch -n origin ${u}`),console.log("successfully fetched base.ref")}catch(e){console.log("fetching base.ref failed",e.message);try{await(0,a.exec)(`git fetch -n origin ${l}`),console.log("successfully fetched base.sha")}catch(e){console.log("fetching base.sha failed",e.message);try{await(0,a.exec)("git fetch -n")}catch(e){console.log("fetch failed",e.message)}}}console.log("checking out and building base commit");try{if(!u)throw Error("missing context.payload.base.ref");await(0,a.exec)(`git reset --hard ${u}`)}catch(e){await(0,a.exec)(`git reset --hard ${l}`)}(0,r.endGroup)();const x=(0,r.getInput)("clean-script");x&&((0,r.startGroup)(`[base] Cleanup via ${k} run ${x}`),await(0,a.exec)(`${k} run ${x}`),(0,r.endGroup)()),(0,r.startGroup)("[base] Install Dependencies"),y=await p(o().resolve(h,"yarn.lock")),w=await p(o().resolve(h,"pnpm-lock.yaml")),b=await p(o().resolve(h,"package-lock.json")),k="npm",v="npm install",y?(v="yarn --frozen-lockfile",k="yarn"):w?(v="pnpm install --frozen-lockfile",k="pnpm"):b&&(v="npm ci"),console.log(`Installing using ${v}`),await(0,a.exec)(v),(0,r.endGroup)(),(0,r.startGroup)(`[base] Build using ${k}`),await(0,a.exec)(`${k} run ${f}`),(0,r.endGroup)(),await(0,a.exec)("git reset --hard");const q=await m.readFromDisk(h),G=await m.getDiff(q,$);(0,r.startGroup)("Size Differences:");const j=await m.printSizes(G);console.log(j),(0,r.endGroup)();const I=function(e,{collapseUnchanged:t,omitUnchanged:n,minimumChangeThreshold:o}){let r=[],s=[];for(const o of e){const{filename:e,size:a,delta:i}=o,c=i.length;if(c&&n)continue;const l=[`\`${e}\``,a,i];c&&t?s.push(l):r.push(l)}let a=d(r);0!==s.length&&(a+=`\n\n<details><summary>ℹ️ <strong>View Unchanged</strong></summary>\n\n${d(s)}\n\n</details>\n\n`);return a}(G,{collapseUnchanged:g((0,r.getInput)("collapse-unchanged")),omitUnchanged:g((0,r.getInput)("omit-unchanged"))});let P=!1;const O={...t.repo,issue_number:c},D={...O,body:I+'\n\n<a href="https://github.com/fabiankaegy/monitor-generated-wordpress-dependencies-action"><sub>monitor-generated-wordpress-dependencies-action</sub></a>'};if("pull_request"!==t.eventName&&"pull_request_target"!==t.eventName)console.log("No PR associated with this action run. Not posting a check or comment."),P=!1;else if(g((0,r.getInput)("use-check")))if(n){const n=await async function(e,t){const n=await e.checks.create({...t.repo,name:"Monitor Generated WordPress Dependencies",head_sha:t.payload.pull_request.head.sha,status:"in_progress"});return async o=>{await e.checks.update({...t.repo,check_run_id:n.data.id,completed_at:(new Date).toISOString(),status:"completed",...o})}}(e,t);await n({conclusion:"success",output:{title:"Monitor Generated WordPress Dependencies Action",summary:I}})}else P=!0;else{let n;(0,r.startGroup)("Updating stats PR comment");try{const t=(await e.issues.listComments(O)).data;for(let e=t.length;e--;){const o=t[e];if("Bot"===o.user.type&&/<sub>monitor-generated-wordpress-dependencies-action/.test(o.body)){n=o.id;break}}}catch(e){console.log("Error checking for previous comments: "+e.message)}if(n){console.log(`Updating previous comment #${n}`);try{await e.issues.updateComment({...t.repo,comment_id:n,body:D.body})}catch(e){console.log("Error editing previous comment: "+e.message),n=null}}if(!n){console.log("Creating new comment");try{await e.issues.createComment(D)}catch(n){console.log(`Error creating comment: ${n.message}`),console.log("Submitting a PR review comment instead...");try{const n=t.issue;await e.pulls.createReview({owner:n.owner,repo:n.repo,pull_number:n.number,event:"COMMENT",body:D.body})}catch(e){console.log("Error creating PR review."),P=!0}}}(0,r.endGroup)()}P&&console.log(`\n\t\t\tError: monitor-generated-wordpress-dependencies-action was unable to comment on your PR.\n\t\t\tThis can happen for PR's originating from a fork without write permissions.\n\t\t\tYou can copy the size table directly into a comment using the markdown below:\n\t\t\t\n\n${D.body}\n\n\n\t\t`.replace(/^(\t|  )+/gm,"")),console.log("All done!")}(async()=>{try{const e=(0,r.getInput)("repo-token"),t=(0,s.getOctokit)(e);await x(t,s.context,e)}catch(e){(0,r.setFailed)(e.message)}})(),module.exports=t}();