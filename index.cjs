var e=require("path"),t=require("@actions/core"),n=require("@actions/github"),o=require("@actions/exec"),r=require("fs");require("pretty-bytes");var a=require("php-array-parser");function s(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var i=/*#__PURE__*/s(e),c=/*#__PURE__*/s(r),l=/*#__PURE__*/s(a);async function u(e){try{return await c.default.promises.access(e,c.default.constants.F_OK),!0}catch(e){}return!1}function p(e){if(0==e.length)return"";for(;e.every(e=>!e[e.length-1]);)for(const t of e)t.pop();const[t]=e;let n=t.length;if(3===n&&e.every(e=>"0 B"===e[2])){n-=1;for(const t of e)t.pop()}return 0===n?"":[["Filename","Dependencies","Change",""].slice(0,n),[":---",":---:",":---:",":---:"].slice(0,n),...e].map(e=>`| ${e.join(" | ")} |`).join("\n")}function d(e){return/^(1|true|yes)$/.test(e)}function g(e,t,n){return n.indexOf(e)===t}const f=require("path"),m=require("util.promisify"),h=require("glob"),w=require("minimatch");require("fs-extra");const y=m(h);class b{constructor(e){const t=e||{};t.pattern=t.pattern||"**/*.asset.php",t.filename=t.filename||"size-plugin.json",t.writeFile=!1!==t.writeFile,t.filepath=f.join(process.cwd(),t.filename),t.mode=t.mode||process.env.NODE_ENV,this.options=t}filterFiles(e){const t=w.filter(this.options.pattern),n=this.options.exclude?w.filter(this.options.exclude):()=>!1;return e.filter(e=>t(e)&&!n(e))}async readFromDisk(e){const t=await y(this.options.pattern,{cwd:e,ignore:this.options.exclude}),n=await Promise.all(this.filterFiles(t).map(t=>async function(e){const{dependencies:t}=await async function(e){const t=await async function(e){return(await c.default.promises.readFile(e)).toString()}(e),n=await async function(e){const t=e.match(/array\(.+?(?=\;)/gm);if(!t)throw new Error("Could not find asset file array");return t[0]}(t);return l.default.parse(n)}(e);return t}(f.join(e,t)).catch(()=>null)));return o=n,t.reduce((e,t,n)=>(e[t]=o[n],e),{});var o}async getDiff(e,t){const n=[...Object.keys(e),...Object.keys(t)].filter(g),o=[];for(const r of n){const n=t[r]||0,a=e[r]||0,s=n.filter(e=>!a.includes(e));o.push({filename:r,dependency:n.join(", "),difference:s.join(", ")})}return o}}(async()=>{try{const e=t.getInput("repo-token"),r=n.getOctokit(e);await async function(e,n,r){const{number:a}=n.issue;try{t.debug("pr"+JSON.stringify(n.payload,null,2))}catch(e){}let s,c;if("push"==n.eventName)s=n.payload.before,c=n.payload.ref,console.log(`Pushed new commit on top of ${c} (${s})`);else{if("pull_request"!=n.eventName&&"pull_request_target"!=n.eventName)throw new Error(`Unsupported eventName in github.context: ${n.eventName}. Only "pull_request", "pull_request_target", and "push" triggered workflows are currently supported.`);{const e=n.payload.pull_request;s=e.base.sha,c=e.base.ref,console.log(`PR #${a} is targeted at ${c} (${c})`)}}t.getInput("cwd")&&process.chdir(t.getInput("cwd"));const l=new b({pattern:t.getInput("pattern")||"**/dist/**/*.asset.php",exclude:t.getInput("exclude")||"{**/*.map,**/node_modules/**}"}),g=t.getInput("build-script")||"build",f=process.cwd();let m=await u(i.default.resolve(f,"yarn.lock")),h=await u(i.default.resolve(f,"pnpm-lock.yaml")),w=await u(i.default.resolve(f,"package-lock.json")),y="npm",k="npm install";m?(k="yarn --frozen-lockfile",y="yarn"):h?(k="pnpm install --frozen-lockfile",y="pnpm"):w&&(k="npm ci"),t.startGroup("[current] Install Dependencies"),console.log(`Installing using ${k}`),await o.exec(k),t.endGroup(),t.startGroup(`[current] Build using ${y}`),console.log(`Building using ${y} run ${g}`),await o.exec(`${y} run ${g}`),t.endGroup(),await o.exec("git reset --hard");const $=await l.readFromDisk(f);t.startGroup("[base] Checkout target branch");try{if(!c)throw Error("missing context.payload.pull_request.base.ref");await o.exec(`git fetch -n origin ${c}`),console.log("successfully fetched base.ref")}catch(e){console.log("fetching base.ref failed",e.message);try{await o.exec(`git fetch -n origin ${s}`),console.log("successfully fetched base.sha")}catch(e){console.log("fetching base.sha failed",e.message);try{await o.exec("git fetch -n")}catch(e){console.log("fetch failed",e.message)}}}console.log("checking out and building base commit");try{if(!c)throw Error("missing context.payload.base.ref");await o.exec(`git reset --hard ${c}`)}catch(e){await o.exec(`git reset --hard ${s}`)}t.endGroup();const v=t.getInput("clean-script");v&&(t.startGroup(`[base] Cleanup via ${y} run ${v}`),await o.exec(`${y} run ${v}`),t.endGroup()),t.startGroup("[base] Install Dependencies"),m=await u(i.default.resolve(f,"yarn.lock")),h=await u(i.default.resolve(f,"pnpm-lock.yaml")),w=await u(i.default.resolve(f,"package-lock.json")),y="npm",k="npm install",m?(k="yarn --frozen-lockfile",y="yarn"):h?(k="pnpm install --frozen-lockfile",y="pnpm"):w&&(k="npm ci"),console.log(`Installing using ${k}`),await o.exec(k),t.endGroup(),t.startGroup(`[base] Build using ${y}`),await o.exec(`${y} run ${g}`),t.endGroup(),await o.exec("git reset --hard");const x=await l.readFromDisk(f),_=await l.getDiff(x,$);t.startGroup("Size Differences:");const q=await l.printSizes(_);console.log(q),t.endGroup();const G=function(e,{collapseUnchanged:t,omitUnchanged:n}){let o=[],r=[];for(const a of e){const{filename:e,size:s,delta:i}=a,c=i.length;if(c&&n)continue;const l=[`\`${e}\``,s,i];c&&t?r.push(l):o.push(l)}let a=p(o);return 0!==r.length&&(a+=`\n\n<details><summary>ℹ️ <strong>View Unchanged</strong></summary>\n\n${p(r)}\n\n</details>\n\n`),a}(_,{collapseUnchanged:d(t.getInput("collapse-unchanged")),omitUnchanged:d(t.getInput("omit-unchanged"))});let I=!1;const D={...n.repo,issue_number:a},N={...D,body:G+'\n\n<a href="https://github.com/fabiankaegy/monitor-generated-wordpress-dependencies-action"><sub>monitor-generated-wordpress-dependencies-action</sub></a>'};if("pull_request"!==n.eventName&&"pull_request_target"!==n.eventName)console.log("No PR associated with this action run. Not posting a check or comment."),I=!1;else if(d(t.getInput("use-check")))if(r){const t=await async function(e,t){const n=await e.checks.create({...t.repo,name:"Monitor Generated WordPress Dependencies",head_sha:t.payload.pull_request.head.sha,status:"in_progress"});return async o=>{await e.checks.update({...t.repo,check_run_id:n.data.id,completed_at:(new Date).toISOString(),status:"completed",...o})}}(e,n);await t({conclusion:"success",output:{title:"Monitor Generated WordPress Dependencies Action",summary:G}})}else I=!0;else{let o;t.startGroup("Updating stats PR comment");try{const t=(await e.issues.listComments(D)).data;for(let e=t.length;e--;){const n=t[e];if("Bot"===n.user.type&&/<sub>monitor-generated-wordpress-dependencies-action/.test(n.body)){o=n.id;break}}}catch(e){console.log("Error checking for previous comments: "+e.message)}if(o){console.log(`Updating previous comment #${o}`);try{await e.issues.updateComment({...n.repo,comment_id:o,body:N.body})}catch(e){console.log("Error editing previous comment: "+e.message),o=null}}if(!o){console.log("Creating new comment");try{await e.issues.createComment(N)}catch(t){console.log(`Error creating comment: ${t.message}`),console.log("Submitting a PR review comment instead...");try{const t=n.issue;await e.pulls.createReview({owner:t.owner,repo:t.repo,pull_number:t.number,event:"COMMENT",body:N.body})}catch(e){console.log("Error creating PR review."),I=!0}}}t.endGroup()}I&&console.log(`\n\t\t\tError: monitor-generated-wordpress-dependencies-action was unable to comment on your PR.\n\t\t\tThis can happen for PR's originating from a fork without write permissions.\n\t\t\tYou can copy the size table directly into a comment using the markdown below:\n\t\t\t\n\n${N.body}\n\n\n\t\t`.replace(/^(\t|  )+/gm,"")),console.log("All done!")}(r,n.context,e)}catch(e){t.setFailed(e.message)}})();
